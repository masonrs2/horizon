// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: follows.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const acceptFollow = `-- name: AcceptFollow :one
UPDATE follows
SET is_accepted = true
WHERE follower_id = $1 AND followed_id = $2
RETURNING follower_id, followed_id, is_accepted, created_at
`

type AcceptFollowParams struct {
	FollowerID pgtype.UUID `json:"follower_id"`
	FollowedID pgtype.UUID `json:"followed_id"`
}

func (q *Queries) AcceptFollow(ctx context.Context, arg AcceptFollowParams) (Follow, error) {
	row := q.db.QueryRow(ctx, acceptFollow, arg.FollowerID, arg.FollowedID)
	var i Follow
	err := row.Scan(
		&i.FollowerID,
		&i.FollowedID,
		&i.IsAccepted,
		&i.CreatedAt,
	)
	return i, err
}

const createFollow = `-- name: CreateFollow :one
INSERT INTO follows (follower_id, followed_id, is_accepted)
VALUES ($1, $2, CASE WHEN (
    SELECT is_private FROM users WHERE id = $2
) THEN false ELSE true END)
RETURNING follower_id, followed_id, is_accepted, created_at
`

type CreateFollowParams struct {
	FollowerID pgtype.UUID `json:"follower_id"`
	FollowedID pgtype.UUID `json:"followed_id"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (Follow, error) {
	row := q.db.QueryRow(ctx, createFollow, arg.FollowerID, arg.FollowedID)
	var i Follow
	err := row.Scan(
		&i.FollowerID,
		&i.FollowedID,
		&i.IsAccepted,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follows
WHERE follower_id = $1 AND followed_id = $2
`

type DeleteFollowParams struct {
	FollowerID pgtype.UUID `json:"follower_id"`
	FollowedID pgtype.UUID `json:"followed_id"`
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.Exec(ctx, deleteFollow, arg.FollowerID, arg.FollowedID)
	return err
}

const getFollowStatus = `-- name: GetFollowStatus :one
SELECT EXISTS (
    SELECT 1 FROM follows
    WHERE follower_id = $1 AND followed_id = $2
    AND is_accepted = true
) as is_following
`

type GetFollowStatusParams struct {
	FollowerID pgtype.UUID `json:"follower_id"`
	FollowedID pgtype.UUID `json:"followed_id"`
}

func (q *Queries) GetFollowStatus(ctx context.Context, arg GetFollowStatusParams) (bool, error) {
	row := q.db.QueryRow(ctx, getFollowStatus, arg.FollowerID, arg.FollowedID)
	var is_following bool
	err := row.Scan(&is_following)
	return is_following, err
}

const getFollowers = `-- name: GetFollowers :many
SELECT 
    u.id,
    u.username,
    u.display_name,
    u.avatar_url,
    u.created_at,
    u.updated_at,
    u.is_private,
    f.created_at as followed_at
FROM users u
JOIN follows f ON u.id = f.follower_id
WHERE f.followed_id = $1
AND f.is_accepted = true
ORDER BY f.created_at DESC
LIMIT $2 OFFSET $3
`

type GetFollowersParams struct {
	FollowedID pgtype.UUID `json:"followed_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetFollowersRow struct {
	ID          pgtype.UUID        `json:"id"`
	Username    string             `json:"username"`
	DisplayName pgtype.Text        `json:"display_name"`
	AvatarUrl   pgtype.Text        `json:"avatar_url"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	IsPrivate   bool               `json:"is_private"`
	FollowedAt  pgtype.Timestamptz `json:"followed_at"`
}

func (q *Queries) GetFollowers(ctx context.Context, arg GetFollowersParams) ([]GetFollowersRow, error) {
	rows, err := q.db.Query(ctx, getFollowers, arg.FollowedID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowersRow
	for rows.Next() {
		var i GetFollowersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.FollowedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowersCount = `-- name: GetFollowersCount :one
SELECT COUNT(*)
FROM follows
WHERE followed_id = $1
AND is_accepted = true
`

func (q *Queries) GetFollowersCount(ctx context.Context, followedID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getFollowersCount, followedID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFollowing = `-- name: GetFollowing :many
SELECT 
    u.id,
    u.username,
    u.display_name,
    u.avatar_url,
    u.created_at,
    u.updated_at,
    u.is_private,
    f.created_at as followed_at
FROM users u
JOIN follows f ON u.id = f.followed_id
WHERE f.follower_id = $1
AND f.is_accepted = true
ORDER BY f.created_at DESC
LIMIT $2 OFFSET $3
`

type GetFollowingParams struct {
	FollowerID pgtype.UUID `json:"follower_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetFollowingRow struct {
	ID          pgtype.UUID        `json:"id"`
	Username    string             `json:"username"`
	DisplayName pgtype.Text        `json:"display_name"`
	AvatarUrl   pgtype.Text        `json:"avatar_url"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	IsPrivate   bool               `json:"is_private"`
	FollowedAt  pgtype.Timestamptz `json:"followed_at"`
}

func (q *Queries) GetFollowing(ctx context.Context, arg GetFollowingParams) ([]GetFollowingRow, error) {
	rows, err := q.db.Query(ctx, getFollowing, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowingRow
	for rows.Next() {
		var i GetFollowingRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.FollowedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingCount = `-- name: GetFollowingCount :one
SELECT COUNT(*)
FROM follows
WHERE follower_id = $1
AND is_accepted = true
`

func (q *Queries) GetFollowingCount(ctx context.Context, followerID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getFollowingCount, followerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPendingFollowRequests = `-- name: GetPendingFollowRequests :many
SELECT 
    u.id,
    u.username,
    u.display_name,
    u.avatar_url,
    u.bio,
    u.is_private,
    f.created_at
FROM follows f
JOIN users u ON f.follower_id = u.id
WHERE f.followed_id = $1 AND f.is_accepted = false AND u.deleted_at IS NULL
ORDER BY f.created_at DESC
LIMIT $2 OFFSET $3
`

type GetPendingFollowRequestsParams struct {
	FollowedID pgtype.UUID `json:"followed_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetPendingFollowRequestsRow struct {
	ID          pgtype.UUID        `json:"id"`
	Username    string             `json:"username"`
	DisplayName pgtype.Text        `json:"display_name"`
	AvatarUrl   pgtype.Text        `json:"avatar_url"`
	Bio         pgtype.Text        `json:"bio"`
	IsPrivate   bool               `json:"is_private"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetPendingFollowRequests(ctx context.Context, arg GetPendingFollowRequestsParams) ([]GetPendingFollowRequestsRow, error) {
	rows, err := q.db.Query(ctx, getPendingFollowRequests, arg.FollowedID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPendingFollowRequestsRow
	for rows.Next() {
		var i GetPendingFollowRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
			&i.Bio,
			&i.IsPrivate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
