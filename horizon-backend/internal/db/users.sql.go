// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, 
    email, 
    password_hash, 
    display_name
    -- avatar_url, bio, and is_private will use their default values
)
VALUES (
    $1, $2, $3, $4
)
RETURNING id, username, email, password_hash, display_name, 
    COALESCE(avatar_url, '') as avatar_url,
    COALESCE(bio, '') as bio,
    COALESCE(is_private, false) as is_private,
    created_at, updated_at, deleted_at, email_verified, last_login
`

type CreateUserParams struct {
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	DisplayName  pgtype.Text `json:"display_name"`
}

type CreateUserRow struct {
	ID            pgtype.UUID        `json:"id"`
	Username      string             `json:"username"`
	Email         string             `json:"email"`
	PasswordHash  string             `json:"password_hash"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     string             `json:"avatar_url"`
	Bio           string             `json:"bio"`
	IsPrivate     bool               `json:"is_private"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	EmailVerified bool               `json:"email_verified"`
	LastLogin     pgtype.Timestamptz `json:"last_login"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.DisplayName,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EmailVerified,
		&i.LastLogin,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, display_name, avatar_url, bio, location, website, is_private, created_at, updated_at, deleted_at, email_verified, last_login FROM users
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.Location,
		&i.Website,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EmailVerified,
		&i.LastLogin,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password_hash, display_name, avatar_url, bio, location, website, is_private, created_at, updated_at, deleted_at, email_verified, last_login FROM users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.Location,
		&i.Website,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EmailVerified,
		&i.LastLogin,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, display_name, avatar_url, bio, location, website, is_private, created_at, updated_at, deleted_at, email_verified, last_login FROM users
WHERE username = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.Location,
		&i.Website,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EmailVerified,
		&i.LastLogin,
	)
	return i, err
}

const getUserStats = `-- name: GetUserStats :one
SELECT 
    (SELECT COUNT(*) FROM follows f WHERE f.followed_id = u.id AND f.is_accepted = true) as followers_count,
    (SELECT COUNT(*) FROM follows f WHERE f.follower_id = u.id AND f.is_accepted = true) as following_count
FROM users u
WHERE u.id = $1 AND u.deleted_at IS NULL
`

type GetUserStatsRow struct {
	FollowersCount int64 `json:"followers_count"`
	FollowingCount int64 `json:"following_count"`
}

func (q *Queries) GetUserStats(ctx context.Context, id pgtype.UUID) (GetUserStatsRow, error) {
	row := q.db.QueryRow(ctx, getUserStats, id)
	var i GetUserStatsRow
	err := row.Scan(&i.FollowersCount, &i.FollowingCount)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  display_name = COALESCE($2, display_name),
  bio = COALESCE($3, bio),
  location = COALESCE($4, location),
  website = COALESCE($5, website),
  updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, password_hash, display_name, avatar_url, bio, location, website, is_private, created_at, updated_at, deleted_at, email_verified, last_login
`

type UpdateUserParams struct {
	ID          pgtype.UUID `json:"id"`
	DisplayName pgtype.Text `json:"display_name"`
	Bio         pgtype.Text `json:"bio"`
	Location    pgtype.Text `json:"location"`
	Website     pgtype.Text `json:"website"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.DisplayName,
		arg.Bio,
		arg.Location,
		arg.Website,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.Location,
		&i.Website,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EmailVerified,
		&i.LastLogin,
	)
	return i, err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :one
UPDATE users
SET
  avatar_url = $1,
  updated_at = NOW()
WHERE id = $2
RETURNING id, username, email, password_hash, display_name, avatar_url, bio, location, website, is_private, created_at, updated_at, deleted_at, email_verified, last_login
`

type UpdateUserAvatarParams struct {
	AvatarUrl pgtype.Text `json:"avatar_url"`
	ID        pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserAvatar, arg.AvatarUrl, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Bio,
		&i.Location,
		&i.Website,
		&i.IsPrivate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.EmailVerified,
		&i.LastLogin,
	)
	return i, err
}
