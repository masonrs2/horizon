// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notifications.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
    user_id,
    actor_id,
    post_id,
    parent_post_id,
    type
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5::notification_type
)
RETURNING id, user_id, actor_id, post_id, parent_post_id, type, read, created_at, updated_at, deleted_at
`

type CreateNotificationParams struct {
	UserID           pgtype.UUID      `json:"user_id"`
	ActorID          pgtype.UUID      `json:"actor_id"`
	PostID           pgtype.UUID      `json:"post_id"`
	ParentPostID     pgtype.UUID      `json:"parent_post_id"`
	NotificationType NotificationType `json:"notification_type"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification,
		arg.UserID,
		arg.ActorID,
		arg.PostID,
		arg.ParentPostID,
		arg.NotificationType,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActorID,
		&i.PostID,
		&i.ParentPostID,
		&i.Type,
		&i.Read,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
UPDATE notifications
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNotification, id)
	return err
}

const getNotifications = `-- name: GetNotifications :many
SELECT 
    n.id, n.user_id, n.actor_id, n.post_id, n.parent_post_id, n.type, n.read, n.created_at, n.updated_at, n.deleted_at,
    actor.username as actor_username,
    actor.display_name as actor_display_name,
    actor.avatar_url as actor_avatar_url,
    p.content as post_content,
    pp.content as parent_post_content
FROM notifications n
JOIN users actor ON n.actor_id = actor.id
LEFT JOIN posts p ON n.post_id = p.id
LEFT JOIN posts pp ON n.parent_post_id = pp.id
WHERE n.user_id = $1 
    AND n.deleted_at IS NULL
ORDER BY n.created_at DESC
LIMIT $2
OFFSET $3
`

type GetNotificationsParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetNotificationsRow struct {
	ID                pgtype.UUID        `json:"id"`
	UserID            pgtype.UUID        `json:"user_id"`
	ActorID           pgtype.UUID        `json:"actor_id"`
	PostID            pgtype.UUID        `json:"post_id"`
	ParentPostID      pgtype.UUID        `json:"parent_post_id"`
	Type              NotificationType   `json:"type"`
	Read              bool               `json:"read"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	DeletedAt         pgtype.Timestamptz `json:"deleted_at"`
	ActorUsername     pgtype.Text        `json:"actor_username"`
	ActorDisplayName  pgtype.Text        `json:"actor_display_name"`
	ActorAvatarUrl    pgtype.Text        `json:"actor_avatar_url"`
	PostContent       pgtype.Text        `json:"post_content"`
	ParentPostContent pgtype.Text        `json:"parent_post_content"`
}

func (q *Queries) GetNotifications(ctx context.Context, arg GetNotificationsParams) ([]GetNotificationsRow, error) {
	rows, err := q.db.Query(ctx, getNotifications, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotificationsRow
	for rows.Next() {
		var i GetNotificationsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ActorID,
			&i.PostID,
			&i.ParentPostID,
			&i.Type,
			&i.Read,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ActorUsername,
			&i.ActorDisplayName,
			&i.ActorAvatarUrl,
			&i.PostContent,
			&i.ParentPostContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadNotificationCount = `-- name: GetUnreadNotificationCount :one
SELECT COUNT(*)
FROM notifications
WHERE user_id = $1 
    AND read = false 
    AND deleted_at IS NULL
`

func (q *Queries) GetUnreadNotificationCount(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getUnreadNotificationCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const markAllNotificationsAsRead = `-- name: MarkAllNotificationsAsRead :exec
UPDATE notifications
SET read = true,
    updated_at = NOW()
WHERE user_id = $1
    AND read = false
    AND deleted_at IS NULL
`

func (q *Queries) MarkAllNotificationsAsRead(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, markAllNotificationsAsRead, userID)
	return err
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :one
UPDATE notifications
SET read = true,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, actor_id, post_id, parent_post_id, type, read, created_at, updated_at, deleted_at
`

func (q *Queries) MarkNotificationAsRead(ctx context.Context, id pgtype.UUID) (Notification, error) {
	row := q.db.QueryRow(ctx, markNotificationAsRead, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ActorID,
		&i.PostID,
		&i.ParentPostID,
		&i.Type,
		&i.Read,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
