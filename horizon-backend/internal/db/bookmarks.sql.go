// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bookmarks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBookmark = `-- name: CreateBookmark :exec
INSERT INTO bookmarks (user_id, post_id)
VALUES ($1, $2)
`

type CreateBookmarkParams struct {
	UserID pgtype.UUID `json:"user_id"`
	PostID pgtype.UUID `json:"post_id"`
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) error {
	_, err := q.db.Exec(ctx, createBookmark, arg.UserID, arg.PostID)
	return err
}

const deleteBookmark = `-- name: DeleteBookmark :exec
DELETE FROM bookmarks
WHERE user_id = $1 AND post_id = $2
`

type DeleteBookmarkParams struct {
	UserID pgtype.UUID `json:"user_id"`
	PostID pgtype.UUID `json:"post_id"`
}

func (q *Queries) DeleteBookmark(ctx context.Context, arg DeleteBookmarkParams) error {
	_, err := q.db.Exec(ctx, deleteBookmark, arg.UserID, arg.PostID)
	return err
}

const getUserBookmarkedPosts = `-- name: GetUserBookmarkedPosts :many
SELECT p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count
FROM posts p
JOIN bookmarks b ON b.post_id = p.id
WHERE b.user_id = $1
ORDER BY b.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserBookmarkedPostsParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetUserBookmarkedPosts(ctx context.Context, arg GetUserBookmarkedPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getUserBookmarkedPosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsPrivate,
			&i.ReplyToPostID,
			&i.AllowReplies,
			&i.MediaUrls,
			&i.LikeCount,
			&i.RepostCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isPostBookmarked = `-- name: IsPostBookmarked :one
SELECT EXISTS (
    SELECT 1
    FROM bookmarks
    WHERE user_id = $1 AND post_id = $2
) AS is_bookmarked
`

type IsPostBookmarkedParams struct {
	UserID pgtype.UUID `json:"user_id"`
	PostID pgtype.UUID `json:"post_id"`
}

func (q *Queries) IsPostBookmarked(ctx context.Context, arg IsPostBookmarkedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isPostBookmarked, arg.UserID, arg.PostID)
	var is_bookmarked bool
	err := row.Scan(&is_bookmarked)
	return is_bookmarked, err
}
