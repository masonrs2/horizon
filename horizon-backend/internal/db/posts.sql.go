// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
WITH new_post AS (
    INSERT INTO posts (
        user_id,
        content,
        is_private,
        reply_to_post_id,
        media_urls
    ) VALUES (
        $1, $2, $3, $4, $5
    )
    RETURNING id, user_id, content, created_at, updated_at, deleted_at, is_private, reply_to_post_id, allow_replies, media_urls, like_count, repost_count
)
SELECT 
    p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count,
    u.username,
    u.display_name,
    u.avatar_url
FROM new_post p
JOIN users u ON p.user_id = u.id
`

type CreatePostParams struct {
	UserID        pgtype.UUID `json:"user_id"`
	Content       string      `json:"content"`
	IsPrivate     bool        `json:"is_private"`
	ReplyToPostID pgtype.UUID `json:"reply_to_post_id"`
	MediaUrls     []string    `json:"media_urls"`
}

type CreatePostRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
	Username      string             `json:"username"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.UserID,
		arg.Content,
		arg.IsPrivate,
		arg.ReplyToPostID,
		arg.MediaUrls,
	)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsPrivate,
		&i.ReplyToPostID,
		&i.AllowReplies,
		&i.MediaUrls,
		&i.LikeCount,
		&i.RepostCount,
		&i.Username,
		&i.DisplayName,
		&i.AvatarUrl,
	)
	return i, err
}

const decrementLikeCount = `-- name: DecrementLikeCount :one
UPDATE posts
SET like_count = GREATEST(0, like_count - 1)
WHERE id = $1 AND deleted_at IS NULL
RETURNING like_count
`

func (q *Queries) DecrementLikeCount(ctx context.Context, id pgtype.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, decrementLikeCount, id)
	var like_count int32
	err := row.Scan(&like_count)
	return like_count, err
}

const deletePost = `-- name: DeletePost :exec
UPDATE posts 
SET deleted_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id
`

type DeletePostParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.db.Exec(ctx, deletePost, arg.ID, arg.UserID)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT 
    p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count,
    u.username,
    u.display_name,
    u.avatar_url
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.deleted_at IS NULL 
ORDER BY p.created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllPostsRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
	Username      string             `json:"username"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) GetAllPosts(ctx context.Context, arg GetAllPostsParams) ([]GetAllPostsRow, error) {
	rows, err := q.db.Query(ctx, getAllPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsPrivate,
			&i.ReplyToPostID,
			&i.AllowReplies,
			&i.MediaUrls,
			&i.LikeCount,
			&i.RepostCount,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT 
    p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count,
    u.username,
    u.display_name,
    u.avatar_url
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.id = $1 AND p.deleted_at IS NULL
`

type GetPostByIDRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
	Username      string             `json:"username"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) GetPostByID(ctx context.Context, id pgtype.UUID) (GetPostByIDRow, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsPrivate,
		&i.ReplyToPostID,
		&i.AllowReplies,
		&i.MediaUrls,
		&i.LikeCount,
		&i.RepostCount,
		&i.Username,
		&i.DisplayName,
		&i.AvatarUrl,
	)
	return i, err
}

const getPostLikeCount = `-- name: GetPostLikeCount :one
SELECT COUNT(*) FROM post_likes pl
WHERE pl.post_id = $1
`

func (q *Queries) GetPostLikeCount(ctx context.Context, postID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getPostLikeCount, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPostReplies = `-- name: GetPostReplies :many
SELECT 
    p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count,
    u.username,
    u.display_name,
    u.avatar_url
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.reply_to_post_id = $1 
AND p.deleted_at IS NULL
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type GetPostRepliesParams struct {
	ReplyToPostID pgtype.UUID `json:"reply_to_post_id"`
	Limit         int32       `json:"limit"`
	Offset        int32       `json:"offset"`
}

type GetPostRepliesRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
	Username      string             `json:"username"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) GetPostReplies(ctx context.Context, arg GetPostRepliesParams) ([]GetPostRepliesRow, error) {
	rows, err := q.db.Query(ctx, getPostReplies, arg.ReplyToPostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostRepliesRow
	for rows.Next() {
		var i GetPostRepliesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsPrivate,
			&i.ReplyToPostID,
			&i.AllowReplies,
			&i.MediaUrls,
			&i.LikeCount,
			&i.RepostCount,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostRepostCount = `-- name: GetPostRepostCount :one
SELECT COUNT(*) FROM reposts
WHERE post_id = $1
`

func (q *Queries) GetPostRepostCount(ctx context.Context, postID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getPostRepostCount, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPostStats = `-- name: GetPostStats :one
SELECT 
    (SELECT COUNT(*) FROM post_likes pl WHERE pl.post_id = p.id) as like_count,
    (SELECT COUNT(*) FROM reposts r WHERE r.post_id = p.id) as repost_count,
    (SELECT COUNT(*) FROM posts replies WHERE replies.reply_to_post_id = p.id AND replies.deleted_at IS NULL) as reply_count
FROM posts p
WHERE p.id = $1 AND p.deleted_at IS NULL
`

type GetPostStatsRow struct {
	LikeCount   int64 `json:"like_count"`
	RepostCount int64 `json:"repost_count"`
	ReplyCount  int64 `json:"reply_count"`
}

func (q *Queries) GetPostStats(ctx context.Context, id pgtype.UUID) (GetPostStatsRow, error) {
	row := q.db.QueryRow(ctx, getPostStats, id)
	var i GetPostStatsRow
	err := row.Scan(&i.LikeCount, &i.RepostCount, &i.ReplyCount)
	return i, err
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT 
    p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count,
    u.username,
    u.display_name,
    u.avatar_url
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.user_id = $1 
AND p.deleted_at IS NULL 
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type GetPostsByUserIDParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetPostsByUserIDRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
	Username      string             `json:"username"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) GetPostsByUserID(ctx context.Context, arg GetPostsByUserIDParams) ([]GetPostsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getPostsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserIDRow
	for rows.Next() {
		var i GetPostsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsPrivate,
			&i.ReplyToPostID,
			&i.AllowReplies,
			&i.MediaUrls,
			&i.LikeCount,
			&i.RepostCount,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsWithHashtag = `-- name: GetPostsWithHashtag :many
SELECT 
    p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count,
    u.username,
    u.display_name,
    u.avatar_url
FROM posts p
JOIN users u ON p.user_id = u.id
INNER JOIN post_hashtags ph ON p.id = ph.post_id
WHERE ph.hashtag = $1 
AND p.deleted_at IS NULL
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type GetPostsWithHashtagParams struct {
	Hashtag string `json:"hashtag"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetPostsWithHashtagRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
	Username      string             `json:"username"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) GetPostsWithHashtag(ctx context.Context, arg GetPostsWithHashtagParams) ([]GetPostsWithHashtagRow, error) {
	rows, err := q.db.Query(ctx, getPostsWithHashtag, arg.Hashtag, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsWithHashtagRow
	for rows.Next() {
		var i GetPostsWithHashtagRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsPrivate,
			&i.ReplyToPostID,
			&i.AllowReplies,
			&i.MediaUrls,
			&i.LikeCount,
			&i.RepostCount,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFeed = `-- name: GetUserFeed :many
SELECT 
    p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count,
    u.username,
    u.display_name,
    u.avatar_url
FROM posts p
JOIN users u ON p.user_id = u.id
INNER JOIN follows f ON p.user_id = f.followed_id
WHERE f.follower_id = $1 
AND p.deleted_at IS NULL
AND (NOT p.is_private OR p.user_id IN (
    SELECT followed_id FROM follows 
    WHERE follower_id = $1 AND is_accepted = true
))
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserFeedParams struct {
	FollowerID pgtype.UUID `json:"follower_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetUserFeedRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
	Username      string             `json:"username"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) GetUserFeed(ctx context.Context, arg GetUserFeedParams) ([]GetUserFeedRow, error) {
	rows, err := q.db.Query(ctx, getUserFeed, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFeedRow
	for rows.Next() {
		var i GetUserFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsPrivate,
			&i.ReplyToPostID,
			&i.AllowReplies,
			&i.MediaUrls,
			&i.LikeCount,
			&i.RepostCount,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLikedPosts = `-- name: GetUserLikedPosts :many
SELECT 
    p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count,
    u.username,
    u.display_name,
    u.avatar_url
FROM posts p
JOIN users u ON p.user_id = u.id
JOIN post_likes pl ON p.id = pl.post_id
WHERE pl.user_id = $1 
AND p.deleted_at IS NULL
ORDER BY pl.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserLikedPostsParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetUserLikedPostsRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
	Username      string             `json:"username"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) GetUserLikedPosts(ctx context.Context, arg GetUserLikedPostsParams) ([]GetUserLikedPostsRow, error) {
	rows, err := q.db.Query(ctx, getUserLikedPosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserLikedPostsRow
	for rows.Next() {
		var i GetUserLikedPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsPrivate,
			&i.ReplyToPostID,
			&i.AllowReplies,
			&i.MediaUrls,
			&i.LikeCount,
			&i.RepostCount,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserReplies = `-- name: GetUserReplies :many
SELECT 
    p.id, p.user_id, p.content, p.created_at, p.updated_at, p.deleted_at, p.is_private, p.reply_to_post_id, p.allow_replies, p.media_urls, p.like_count, p.repost_count,
    u.username,
    u.display_name,
    u.avatar_url
FROM posts p
JOIN users u ON p.user_id = u.id
WHERE p.user_id = $1 
AND p.reply_to_post_id IS NOT NULL
AND p.deleted_at IS NULL
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserRepliesParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetUserRepliesRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
	Username      string             `json:"username"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) GetUserReplies(ctx context.Context, arg GetUserRepliesParams) ([]GetUserRepliesRow, error) {
	rows, err := q.db.Query(ctx, getUserReplies, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRepliesRow
	for rows.Next() {
		var i GetUserRepliesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsPrivate,
			&i.ReplyToPostID,
			&i.AllowReplies,
			&i.MediaUrls,
			&i.LikeCount,
			&i.RepostCount,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasUserBookmarkedPost = `-- name: HasUserBookmarkedPost :one
SELECT EXISTS (
    SELECT 1 FROM bookmarks
    WHERE post_id = $1 AND user_id = $2
) as has_bookmarked
`

type HasUserBookmarkedPostParams struct {
	PostID pgtype.UUID `json:"post_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) HasUserBookmarkedPost(ctx context.Context, arg HasUserBookmarkedPostParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasUserBookmarkedPost, arg.PostID, arg.UserID)
	var has_bookmarked bool
	err := row.Scan(&has_bookmarked)
	return has_bookmarked, err
}

const hasUserLikedPost = `-- name: HasUserLikedPost :one
SELECT EXISTS (
    SELECT 1 FROM post_likes
    WHERE post_id = $1 AND user_id = $2
) as has_liked
`

type HasUserLikedPostParams struct {
	PostID pgtype.UUID `json:"post_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) HasUserLikedPost(ctx context.Context, arg HasUserLikedPostParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasUserLikedPost, arg.PostID, arg.UserID)
	var has_liked bool
	err := row.Scan(&has_liked)
	return has_liked, err
}

const incrementLikeCount = `-- name: IncrementLikeCount :one
UPDATE posts
SET like_count = like_count + 1
WHERE id = $1 AND deleted_at IS NULL
RETURNING like_count
`

func (q *Queries) IncrementLikeCount(ctx context.Context, id pgtype.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, incrementLikeCount, id)
	var like_count int32
	err := row.Scan(&like_count)
	return like_count, err
}

const incrementRepostCount = `-- name: IncrementRepostCount :one
UPDATE posts
SET repost_count = repost_count + 1
WHERE id = $1 AND deleted_at IS NULL
RETURNING repost_count
`

func (q *Queries) IncrementRepostCount(ctx context.Context, id pgtype.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, incrementRepostCount, id)
	var repost_count int32
	err := row.Scan(&repost_count)
	return repost_count, err
}

const likePost = `-- name: LikePost :one
INSERT INTO post_likes (user_id, post_id)
VALUES ($1, $2)
RETURNING user_id, post_id, created_at
`

type LikePostParams struct {
	UserID pgtype.UUID `json:"user_id"`
	PostID pgtype.UUID `json:"post_id"`
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) (PostLike, error) {
	row := q.db.QueryRow(ctx, likePost, arg.UserID, arg.PostID)
	var i PostLike
	err := row.Scan(&i.UserID, &i.PostID, &i.CreatedAt)
	return i, err
}

const repostPost = `-- name: RepostPost :one
INSERT INTO reposts (post_id, reposter_id, original_poster_id)
SELECT $1, $2, posts.user_id
FROM posts
WHERE posts.id = $1
RETURNING post_id, reposter_id, original_poster_id, created_at
`

type RepostPostParams struct {
	PostID     pgtype.UUID `json:"post_id"`
	ReposterID pgtype.UUID `json:"reposter_id"`
}

func (q *Queries) RepostPost(ctx context.Context, arg RepostPostParams) (Repost, error) {
	row := q.db.QueryRow(ctx, repostPost, arg.PostID, arg.ReposterID)
	var i Repost
	err := row.Scan(
		&i.PostID,
		&i.ReposterID,
		&i.OriginalPosterID,
		&i.CreatedAt,
	)
	return i, err
}

const unlikePost = `-- name: UnlikePost :exec
DELETE FROM post_likes pl
WHERE pl.post_id = $1 AND pl.user_id = $2
`

type UnlikePostParams struct {
	PostID pgtype.UUID `json:"post_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) UnlikePost(ctx context.Context, arg UnlikePostParams) error {
	_, err := q.db.Exec(ctx, unlikePost, arg.PostID, arg.UserID)
	return err
}

const updatePostContent = `-- name: UpdatePostContent :one
UPDATE posts 
SET 
  content = $2,
  updated_at = NOW()
WHERE id = $1 AND user_id = $3 AND deleted_at IS NULL
RETURNING id, user_id, content, created_at, updated_at, deleted_at, is_private, reply_to_post_id, allow_replies, media_urls, like_count, repost_count
`

type UpdatePostContentParams struct {
	ID      pgtype.UUID `json:"id"`
	Content string      `json:"content"`
	UserID  pgtype.UUID `json:"user_id"`
}

// For content edits (limited in Twitter)
func (q *Queries) UpdatePostContent(ctx context.Context, arg UpdatePostContentParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePostContent, arg.ID, arg.Content, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsPrivate,
		&i.ReplyToPostID,
		&i.AllowReplies,
		&i.MediaUrls,
		&i.LikeCount,
		&i.RepostCount,
	)
	return i, err
}

const updatePostPrivacy = `-- name: UpdatePostPrivacy :one
UPDATE posts
SET 
  is_private = $2,
  updated_at = NOW()
WHERE id = $1 AND user_id = $2 AND deleted_at IS NULL
RETURNING id, user_id, content, created_at, updated_at, deleted_at, is_private, reply_to_post_id, allow_replies, media_urls, like_count, repost_count
`

type UpdatePostPrivacyParams struct {
	ID        pgtype.UUID `json:"id"`
	IsPrivate bool        `json:"is_private"`
}

// For toggling privacy
func (q *Queries) UpdatePostPrivacy(ctx context.Context, arg UpdatePostPrivacyParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePostPrivacy, arg.ID, arg.IsPrivate)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsPrivate,
		&i.ReplyToPostID,
		&i.AllowReplies,
		&i.MediaUrls,
		&i.LikeCount,
		&i.RepostCount,
	)
	return i, err
}
