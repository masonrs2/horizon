// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type NotificationType string

const (
	NotificationTypeLike   NotificationType = "like"
	NotificationTypeRepost NotificationType = "repost"
	NotificationTypeReply  NotificationType = "reply"
	NotificationTypeFollow NotificationType = "follow"
)

func (e *NotificationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NotificationType(s)
	case string:
		*e = NotificationType(s)
	default:
		return fmt.Errorf("unsupported scan type for NotificationType: %T", src)
	}
	return nil
}

type NullNotificationType struct {
	NotificationType NotificationType `json:"notification_type"`
	Valid            bool             `json:"valid"` // Valid is true if NotificationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationType) Scan(value interface{}) error {
	if value == nil {
		ns.NotificationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NotificationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NotificationType), nil
}

type Bookmark struct {
	UserID    pgtype.UUID        `json:"user_id"`
	PostID    pgtype.UUID        `json:"post_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Follow struct {
	FollowerID pgtype.UUID        `json:"follower_id"`
	FollowedID pgtype.UUID        `json:"followed_id"`
	IsAccepted bool               `json:"is_accepted"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type Medium struct {
	ID         pgtype.UUID        `json:"id"`
	PostID     pgtype.UUID        `json:"post_id"`
	S3Key      string             `json:"s3_key"`
	FileType   string             `json:"file_type"`
	UploadedAt pgtype.Timestamptz `json:"uploaded_at"`
	IsTemp     bool               `json:"is_temp"`
}

type Mention struct {
	PostID          pgtype.UUID `json:"post_id"`
	MentionedUserID pgtype.UUID `json:"mentioned_user_id"`
}

type Message struct {
	ID         pgtype.UUID        `json:"id"`
	SenderID   pgtype.UUID        `json:"sender_id"`
	ReceiverID pgtype.UUID        `json:"receiver_id"`
	Content    string             `json:"content"`
	Read       bool               `json:"read"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type Notification struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	ActorID      pgtype.UUID        `json:"actor_id"`
	PostID       pgtype.UUID        `json:"post_id"`
	ParentPostID pgtype.UUID        `json:"parent_post_id"`
	Type         NotificationType   `json:"type"`
	Read         bool               `json:"read"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	DeletedAt    pgtype.Timestamptz `json:"deleted_at"`
}

type Post struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	Content       string             `json:"content"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	IsPrivate     bool               `json:"is_private"`
	ReplyToPostID pgtype.UUID        `json:"reply_to_post_id"`
	AllowReplies  bool               `json:"allow_replies"`
	MediaUrls     []string           `json:"media_urls"`
	LikeCount     int32              `json:"like_count"`
	RepostCount   int32              `json:"repost_count"`
}

type PostHashtag struct {
	PostID    pgtype.UUID        `json:"post_id"`
	Hashtag   string             `json:"hashtag"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type PostLike struct {
	UserID    pgtype.UUID        `json:"user_id"`
	PostID    pgtype.UUID        `json:"post_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Repost struct {
	PostID           pgtype.UUID        `json:"post_id"`
	ReposterID       pgtype.UUID        `json:"reposter_id"`
	OriginalPosterID pgtype.UUID        `json:"original_poster_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID            pgtype.UUID        `json:"id"`
	Username      string             `json:"username"`
	Email         string             `json:"email"`
	PasswordHash  string             `json:"password_hash"`
	DisplayName   pgtype.Text        `json:"display_name"`
	AvatarUrl     pgtype.Text        `json:"avatar_url"`
	Bio           pgtype.Text        `json:"bio"`
	Location      pgtype.Text        `json:"location"`
	Website       pgtype.Text        `json:"website"`
	IsPrivate     bool               `json:"is_private"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `json:"deleted_at"`
	EmailVerified bool               `json:"email_verified"`
	LastLogin     pgtype.Timestamptz `json:"last_login"`
}

type UserRelationship struct {
	FollowerID  pgtype.UUID        `json:"follower_id"`
	FollowingID pgtype.UUID        `json:"following_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}
